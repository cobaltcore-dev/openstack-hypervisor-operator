// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// CapabilitiesStatusApplyConfiguration represents a declarative configuration of the CapabilitiesStatus type for use
// with apply.
type CapabilitiesStatusApplyConfiguration struct {
	HostCpuArch *string            `json:"cpuArch,omitempty"`
	HostMemory  *resource.Quantity `json:"memory,omitempty"`
	HostCpus    *resource.Quantity `json:"cpus,omitempty"`
}

// CapabilitiesStatusApplyConfiguration constructs a declarative configuration of the CapabilitiesStatus type for use with
// apply.
func CapabilitiesStatus() *CapabilitiesStatusApplyConfiguration {
	return &CapabilitiesStatusApplyConfiguration{}
}

// WithHostCpuArch sets the HostCpuArch field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostCpuArch field is set to the value of the last call.
func (b *CapabilitiesStatusApplyConfiguration) WithHostCpuArch(value string) *CapabilitiesStatusApplyConfiguration {
	b.HostCpuArch = &value
	return b
}

// WithHostMemory sets the HostMemory field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostMemory field is set to the value of the last call.
func (b *CapabilitiesStatusApplyConfiguration) WithHostMemory(value resource.Quantity) *CapabilitiesStatusApplyConfiguration {
	b.HostMemory = &value
	return b
}

// WithHostCpus sets the HostCpus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostCpus field is set to the value of the last call.
func (b *CapabilitiesStatusApplyConfiguration) WithHostCpus(value resource.Quantity) *CapabilitiesStatusApplyConfiguration {
	b.HostCpus = &value
	return b
}
