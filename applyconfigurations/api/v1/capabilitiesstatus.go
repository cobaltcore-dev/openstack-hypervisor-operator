/*
SPDX-FileCopyrightText: Copyright 2024 SAP SE or an SAP affiliate company and cobaltcore-dev contributors
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// CapabilitiesStatusApplyConfiguration represents a declarative configuration of the CapabilitiesStatus type for use
// with apply.
type CapabilitiesStatusApplyConfiguration struct {
	HostCpuArch *string            `json:"cpuArch,omitempty"`
	HostMemory  *resource.Quantity `json:"memory,omitempty"`
	HostCpus    *resource.Quantity `json:"cpus,omitempty"`
}

// CapabilitiesStatusApplyConfiguration constructs a declarative configuration of the CapabilitiesStatus type for use with
// apply.
func CapabilitiesStatus() *CapabilitiesStatusApplyConfiguration {
	return &CapabilitiesStatusApplyConfiguration{}
}

// WithHostCpuArch sets the HostCpuArch field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostCpuArch field is set to the value of the last call.
func (b *CapabilitiesStatusApplyConfiguration) WithHostCpuArch(value string) *CapabilitiesStatusApplyConfiguration {
	b.HostCpuArch = &value
	return b
}

// WithHostMemory sets the HostMemory field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostMemory field is set to the value of the last call.
func (b *CapabilitiesStatusApplyConfiguration) WithHostMemory(value resource.Quantity) *CapabilitiesStatusApplyConfiguration {
	b.HostMemory = &value
	return b
}

// WithHostCpus sets the HostCpus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostCpus field is set to the value of the last call.
func (b *CapabilitiesStatusApplyConfiguration) WithHostCpus(value resource.Quantity) *CapabilitiesStatusApplyConfiguration {
	b.HostCpus = &value
	return b
}
