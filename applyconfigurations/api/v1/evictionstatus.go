/*
SPDX-FileCopyrightText: Copyright 2024 SAP SE or an SAP affiliate company and cobaltcore-dev contributors
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// EvictionStatusApplyConfiguration represents a declarative configuration of the EvictionStatus type for use
// with apply.
type EvictionStatusApplyConfiguration struct {
	HypervisorServiceId  *string                              `json:"hypervisorServiceId,omitempty"`
	OutstandingRamMb     *int64                               `json:"outstandingRamMb,omitempty"`
	OutstandingInstances []string                             `json:"outstandingInstances,omitempty"`
	Conditions           []metav1.ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// EvictionStatusApplyConfiguration constructs a declarative configuration of the EvictionStatus type for use with
// apply.
func EvictionStatus() *EvictionStatusApplyConfiguration {
	return &EvictionStatusApplyConfiguration{}
}

// WithHypervisorServiceId sets the HypervisorServiceId field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HypervisorServiceId field is set to the value of the last call.
func (b *EvictionStatusApplyConfiguration) WithHypervisorServiceId(value string) *EvictionStatusApplyConfiguration {
	b.HypervisorServiceId = &value
	return b
}

// WithOutstandingRamMb sets the OutstandingRamMb field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OutstandingRamMb field is set to the value of the last call.
func (b *EvictionStatusApplyConfiguration) WithOutstandingRamMb(value int64) *EvictionStatusApplyConfiguration {
	b.OutstandingRamMb = &value
	return b
}

// WithOutstandingInstances adds the given value to the OutstandingInstances field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OutstandingInstances field.
func (b *EvictionStatusApplyConfiguration) WithOutstandingInstances(values ...string) *EvictionStatusApplyConfiguration {
	for i := range values {
		b.OutstandingInstances = append(b.OutstandingInstances, values[i])
	}
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *EvictionStatusApplyConfiguration) WithConditions(values ...*metav1.ConditionApplyConfiguration) *EvictionStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
