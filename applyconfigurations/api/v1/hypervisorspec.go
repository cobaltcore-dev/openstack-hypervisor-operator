// Code generated by controller-gen. DO NOT EDIT.

package v1

// HypervisorSpecApplyConfiguration represents a declarative configuration of the HypervisorSpec type for use
// with apply.
type HypervisorSpecApplyConfiguration struct {
	OperatingSystemVersion       *string  `json:"version,omitempty"`
	Reboot                       *bool    `json:"reboot,omitempty"`
	EvacuateOnReboot             *bool    `json:"evacuateOnReboot,omitempty"`
	LifecycleEnabled             *bool    `json:"lifecycleEnabled,omitempty"`
	SkipTests                    *bool    `json:"skipTests,omitempty"`
	CustomTraits                 []string `json:"customTraits,omitempty"`
	Aggregates                   []string `json:"aggregates,omitempty"`
	HighAvailability             *bool    `json:"highAvailability,omitempty"`
	CreateCertManagerCertificate *bool    `json:"createCertManagerCertificate,omitempty"`
	InstallCertificate           *bool    `json:"installCertificate,omitempty"`
}

// HypervisorSpecApplyConfiguration constructs a declarative configuration of the HypervisorSpec type for use with
// apply.
func HypervisorSpec() *HypervisorSpecApplyConfiguration {
	return &HypervisorSpecApplyConfiguration{}
}

// WithOperatingSystemVersion sets the OperatingSystemVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OperatingSystemVersion field is set to the value of the last call.
func (b *HypervisorSpecApplyConfiguration) WithOperatingSystemVersion(value string) *HypervisorSpecApplyConfiguration {
	b.OperatingSystemVersion = &value
	return b
}

// WithReboot sets the Reboot field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Reboot field is set to the value of the last call.
func (b *HypervisorSpecApplyConfiguration) WithReboot(value bool) *HypervisorSpecApplyConfiguration {
	b.Reboot = &value
	return b
}

// WithEvacuateOnReboot sets the EvacuateOnReboot field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EvacuateOnReboot field is set to the value of the last call.
func (b *HypervisorSpecApplyConfiguration) WithEvacuateOnReboot(value bool) *HypervisorSpecApplyConfiguration {
	b.EvacuateOnReboot = &value
	return b
}

// WithLifecycleEnabled sets the LifecycleEnabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LifecycleEnabled field is set to the value of the last call.
func (b *HypervisorSpecApplyConfiguration) WithLifecycleEnabled(value bool) *HypervisorSpecApplyConfiguration {
	b.LifecycleEnabled = &value
	return b
}

// WithSkipTests sets the SkipTests field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SkipTests field is set to the value of the last call.
func (b *HypervisorSpecApplyConfiguration) WithSkipTests(value bool) *HypervisorSpecApplyConfiguration {
	b.SkipTests = &value
	return b
}

// WithCustomTraits adds the given value to the CustomTraits field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CustomTraits field.
func (b *HypervisorSpecApplyConfiguration) WithCustomTraits(values ...string) *HypervisorSpecApplyConfiguration {
	for i := range values {
		b.CustomTraits = append(b.CustomTraits, values[i])
	}
	return b
}

// WithAggregates adds the given value to the Aggregates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Aggregates field.
func (b *HypervisorSpecApplyConfiguration) WithAggregates(values ...string) *HypervisorSpecApplyConfiguration {
	for i := range values {
		b.Aggregates = append(b.Aggregates, values[i])
	}
	return b
}

// WithHighAvailability sets the HighAvailability field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HighAvailability field is set to the value of the last call.
func (b *HypervisorSpecApplyConfiguration) WithHighAvailability(value bool) *HypervisorSpecApplyConfiguration {
	b.HighAvailability = &value
	return b
}

// WithCreateCertManagerCertificate sets the CreateCertManagerCertificate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CreateCertManagerCertificate field is set to the value of the last call.
func (b *HypervisorSpecApplyConfiguration) WithCreateCertManagerCertificate(value bool) *HypervisorSpecApplyConfiguration {
	b.CreateCertManagerCertificate = &value
	return b
}

// WithInstallCertificate sets the InstallCertificate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstallCertificate field is set to the value of the last call.
func (b *HypervisorSpecApplyConfiguration) WithInstallCertificate(value bool) *HypervisorSpecApplyConfiguration {
	b.InstallCertificate = &value
	return b
}
