// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// HypervisorStatusApplyConfiguration represents a declarative configuration of the HypervisorStatus type for use
// with apply.
type HypervisorStatusApplyConfiguration struct {
	LibVirtVersion  *string                                   `json:"libVirtVersion,omitempty"`
	OperatingSystem *OperatingSystemStatusApplyConfiguration  `json:"operatingSystem,omitempty"`
	Update          *HyperVisorUpdateStatusApplyConfiguration `json:"updateStatus,omitempty"`
	Instances       []InstanceApplyConfiguration              `json:"instances,omitempty"`
	Capabilities    *CapabilitiesStatusApplyConfiguration     `json:"capabilities,omitempty"`
	NumInstances    *int                                      `json:"numInstances,omitempty"`
	HypervisorID    *string                                   `json:"hypervisorId,omitempty"`
	ServiceID       *string                                   `json:"serviceId,omitempty"`
	Traits          []string                                  `json:"traits,omitempty"`
	Aggregates      []string                                  `json:"aggregates,omitempty"`
	InternalIP      *string                                   `json:"internalIp,omitempty"`
	Conditions      []metav1.ConditionApplyConfiguration      `json:"conditions,omitempty"`
	SpecHash        *string                                   `json:"specHash,omitempty"`
}

// HypervisorStatusApplyConfiguration constructs a declarative configuration of the HypervisorStatus type for use with
// apply.
func HypervisorStatus() *HypervisorStatusApplyConfiguration {
	return &HypervisorStatusApplyConfiguration{}
}

// WithLibVirtVersion sets the LibVirtVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LibVirtVersion field is set to the value of the last call.
func (b *HypervisorStatusApplyConfiguration) WithLibVirtVersion(value string) *HypervisorStatusApplyConfiguration {
	b.LibVirtVersion = &value
	return b
}

// WithOperatingSystem sets the OperatingSystem field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OperatingSystem field is set to the value of the last call.
func (b *HypervisorStatusApplyConfiguration) WithOperatingSystem(value *OperatingSystemStatusApplyConfiguration) *HypervisorStatusApplyConfiguration {
	b.OperatingSystem = value
	return b
}

// WithUpdate sets the Update field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Update field is set to the value of the last call.
func (b *HypervisorStatusApplyConfiguration) WithUpdate(value *HyperVisorUpdateStatusApplyConfiguration) *HypervisorStatusApplyConfiguration {
	b.Update = value
	return b
}

// WithInstances adds the given value to the Instances field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Instances field.
func (b *HypervisorStatusApplyConfiguration) WithInstances(values ...*InstanceApplyConfiguration) *HypervisorStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInstances")
		}
		b.Instances = append(b.Instances, *values[i])
	}
	return b
}

// WithCapabilities sets the Capabilities field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Capabilities field is set to the value of the last call.
func (b *HypervisorStatusApplyConfiguration) WithCapabilities(value *CapabilitiesStatusApplyConfiguration) *HypervisorStatusApplyConfiguration {
	b.Capabilities = value
	return b
}

// WithNumInstances sets the NumInstances field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NumInstances field is set to the value of the last call.
func (b *HypervisorStatusApplyConfiguration) WithNumInstances(value int) *HypervisorStatusApplyConfiguration {
	b.NumInstances = &value
	return b
}

// WithHypervisorID sets the HypervisorID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HypervisorID field is set to the value of the last call.
func (b *HypervisorStatusApplyConfiguration) WithHypervisorID(value string) *HypervisorStatusApplyConfiguration {
	b.HypervisorID = &value
	return b
}

// WithServiceID sets the ServiceID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceID field is set to the value of the last call.
func (b *HypervisorStatusApplyConfiguration) WithServiceID(value string) *HypervisorStatusApplyConfiguration {
	b.ServiceID = &value
	return b
}

// WithTraits adds the given value to the Traits field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Traits field.
func (b *HypervisorStatusApplyConfiguration) WithTraits(values ...string) *HypervisorStatusApplyConfiguration {
	for i := range values {
		b.Traits = append(b.Traits, values[i])
	}
	return b
}

// WithAggregates adds the given value to the Aggregates field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Aggregates field.
func (b *HypervisorStatusApplyConfiguration) WithAggregates(values ...string) *HypervisorStatusApplyConfiguration {
	for i := range values {
		b.Aggregates = append(b.Aggregates, values[i])
	}
	return b
}

// WithInternalIP sets the InternalIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InternalIP field is set to the value of the last call.
func (b *HypervisorStatusApplyConfiguration) WithInternalIP(value string) *HypervisorStatusApplyConfiguration {
	b.InternalIP = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *HypervisorStatusApplyConfiguration) WithConditions(values ...*metav1.ConditionApplyConfiguration) *HypervisorStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithSpecHash sets the SpecHash field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SpecHash field is set to the value of the last call.
func (b *HypervisorStatusApplyConfiguration) WithSpecHash(value string) *HypervisorStatusApplyConfiguration {
	b.SpecHash = &value
	return b
}
