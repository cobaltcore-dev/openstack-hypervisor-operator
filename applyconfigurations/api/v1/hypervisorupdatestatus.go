/*
SPDX-FileCopyrightText: Copyright 2024 SAP SE or an SAP affiliate company and cobaltcore-dev contributors
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by controller-gen. DO NOT EDIT.

package v1

// HyperVisorUpdateStatusApplyConfiguration represents a declarative configuration of the HyperVisorUpdateStatus type for use
// with apply.
type HyperVisorUpdateStatusApplyConfiguration struct {
	InProgress *bool   `json:"inProgress,omitempty"`
	Installed  *string `json:"installed,omitempty"`
	Retry      *int    `json:"retry,omitempty"`
}

// HyperVisorUpdateStatusApplyConfiguration constructs a declarative configuration of the HyperVisorUpdateStatus type for use with
// apply.
func HyperVisorUpdateStatus() *HyperVisorUpdateStatusApplyConfiguration {
	return &HyperVisorUpdateStatusApplyConfiguration{}
}

// WithInProgress sets the InProgress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InProgress field is set to the value of the last call.
func (b *HyperVisorUpdateStatusApplyConfiguration) WithInProgress(value bool) *HyperVisorUpdateStatusApplyConfiguration {
	b.InProgress = &value
	return b
}

// WithInstalled sets the Installed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Installed field is set to the value of the last call.
func (b *HyperVisorUpdateStatusApplyConfiguration) WithInstalled(value string) *HyperVisorUpdateStatusApplyConfiguration {
	b.Installed = &value
	return b
}

// WithRetry sets the Retry field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Retry field is set to the value of the last call.
func (b *HyperVisorUpdateStatusApplyConfiguration) WithRetry(value int) *HyperVisorUpdateStatusApplyConfiguration {
	b.Retry = &value
	return b
}
