/*
SPDX-FileCopyrightText: Copyright 2024 SAP SE or an SAP affiliate company and cobaltcore-dev contributors
SPDX-License-Identifier: Apache-2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// OperatingSystemStatusApplyConfiguration represents a declarative configuration of the OperatingSystemStatus type for use
// with apply.
type OperatingSystemStatusApplyConfiguration struct {
	Version         *string      `json:"version,omitempty"`
	PrettyVersion   *string      `json:"prettyVersion,omitempty"`
	KernelName      *string      `json:"kernelName,omitempty"`
	KernelRelease   *string      `json:"kernelRelease,omitempty"`
	KernelVersion   *string      `json:"kernelVersion,omitempty"`
	HardwareVendor  *string      `json:"hardwareVendor,omitempty"`
	HardwareModel   *string      `json:"hardwareModel,omitempty"`
	HardwareSerial  *string      `json:"hardwareSerial,omitempty"`
	FirmwareVersion *string      `json:"firmwareVersion,omitempty"`
	FirmwareVendor  *string      `json:"firmwareVendor,omitempty"`
	FirmwareDate    *metav1.Time `json:"firmwareDate,omitempty"`
}

// OperatingSystemStatusApplyConfiguration constructs a declarative configuration of the OperatingSystemStatus type for use with
// apply.
func OperatingSystemStatus() *OperatingSystemStatusApplyConfiguration {
	return &OperatingSystemStatusApplyConfiguration{}
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *OperatingSystemStatusApplyConfiguration) WithVersion(value string) *OperatingSystemStatusApplyConfiguration {
	b.Version = &value
	return b
}

// WithPrettyVersion sets the PrettyVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrettyVersion field is set to the value of the last call.
func (b *OperatingSystemStatusApplyConfiguration) WithPrettyVersion(value string) *OperatingSystemStatusApplyConfiguration {
	b.PrettyVersion = &value
	return b
}

// WithKernelName sets the KernelName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KernelName field is set to the value of the last call.
func (b *OperatingSystemStatusApplyConfiguration) WithKernelName(value string) *OperatingSystemStatusApplyConfiguration {
	b.KernelName = &value
	return b
}

// WithKernelRelease sets the KernelRelease field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KernelRelease field is set to the value of the last call.
func (b *OperatingSystemStatusApplyConfiguration) WithKernelRelease(value string) *OperatingSystemStatusApplyConfiguration {
	b.KernelRelease = &value
	return b
}

// WithKernelVersion sets the KernelVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KernelVersion field is set to the value of the last call.
func (b *OperatingSystemStatusApplyConfiguration) WithKernelVersion(value string) *OperatingSystemStatusApplyConfiguration {
	b.KernelVersion = &value
	return b
}

// WithHardwareVendor sets the HardwareVendor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HardwareVendor field is set to the value of the last call.
func (b *OperatingSystemStatusApplyConfiguration) WithHardwareVendor(value string) *OperatingSystemStatusApplyConfiguration {
	b.HardwareVendor = &value
	return b
}

// WithHardwareModel sets the HardwareModel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HardwareModel field is set to the value of the last call.
func (b *OperatingSystemStatusApplyConfiguration) WithHardwareModel(value string) *OperatingSystemStatusApplyConfiguration {
	b.HardwareModel = &value
	return b
}

// WithHardwareSerial sets the HardwareSerial field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HardwareSerial field is set to the value of the last call.
func (b *OperatingSystemStatusApplyConfiguration) WithHardwareSerial(value string) *OperatingSystemStatusApplyConfiguration {
	b.HardwareSerial = &value
	return b
}

// WithFirmwareVersion sets the FirmwareVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FirmwareVersion field is set to the value of the last call.
func (b *OperatingSystemStatusApplyConfiguration) WithFirmwareVersion(value string) *OperatingSystemStatusApplyConfiguration {
	b.FirmwareVersion = &value
	return b
}

// WithFirmwareVendor sets the FirmwareVendor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FirmwareVendor field is set to the value of the last call.
func (b *OperatingSystemStatusApplyConfiguration) WithFirmwareVendor(value string) *OperatingSystemStatusApplyConfiguration {
	b.FirmwareVendor = &value
	return b
}

// WithFirmwareDate sets the FirmwareDate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FirmwareDate field is set to the value of the last call.
func (b *OperatingSystemStatusApplyConfiguration) WithFirmwareDate(value metav1.Time) *OperatingSystemStatusApplyConfiguration {
	b.FirmwareDate = &value
	return b
}
