// Code generated by controller-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1 "github.com/cobaltcore-dev/openstack-hypervisor-operator/api/v1"
	apiv1 "github.com/cobaltcore-dev/openstack-hypervisor-operator/applyconfigurations/api/v1"
	internal "github.com/cobaltcore-dev/openstack-hypervisor-operator/applyconfigurations/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	managedfields "k8s.io/apimachinery/pkg/util/managedfields"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=kvm.cloud.sap, Version=v1
	case v1.SchemeGroupVersion.WithKind("CapabilitiesStatus"):
		return &apiv1.CapabilitiesStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("Eviction"):
		return &apiv1.EvictionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("EvictionSpec"):
		return &apiv1.EvictionSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("EvictionStatus"):
		return &apiv1.EvictionStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("Hypervisor"):
		return &apiv1.HypervisorApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("HypervisorSpec"):
		return &apiv1.HypervisorSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("HypervisorStatus"):
		return &apiv1.HypervisorStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("HyperVisorUpdateStatus"):
		return &apiv1.HyperVisorUpdateStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("Instance"):
		return &apiv1.InstanceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("OperatingSystemStatus"):
		return &apiv1.OperatingSystemStatusApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) managedfields.TypeConverter {
	return managedfields.NewSchemeTypeConverter(scheme, internal.Parser())
}
